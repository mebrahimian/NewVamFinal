@page "/formaccount"
@inject DatabaseContext _Db
@inject ILogger<FormPerson> _logger
@inject VamBlazor.Client.Application.Services.PersonServices PersonServices
@inject IMapper Mapper
@inject NavigationManager Navigation
@inject IDialogService DialogService
@layout MainLayout

@using AutoMapper
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Serilog
@using Serilog.Core
@using VamBlazor.Client.Domain.Entities
@using VamBlazor.Client.Domain.Enum
@using VamBlazor.Client.Application.Dtos
@using VamBlazor.Client.Application.Mappings
@using VamBlazor.Client.Application.CommonFunc
@using VamBlazor.Client.Shared.Dialogs
@using VamBlazor.Client.Application.Services


<MudContainer style="font-family:'VazirUI';">

    <MudPaper>
        <MudText Typo="Typo.body2" Align="Align.Center" Style="height:25px;background-color:cadetblue" Class="mt-2">فرم وروداطلاعات حساب اشخاص</MudText>
        <MudForm @ref="PersonsAccountForm" @bind-IsValid="isValid" Spacing="16" Class="p-4">
            <MudRTLProvider RightToLeft="true">
                <MudGrid>
                    <!-- ردیف اول: Code و City , Sex -->
                    <div style="width: 100px">
                        <MudTextField Label="کد شخص" Required Immediate="true"
                        For="@(() => CurrentPersonAccountDto.Pcode)"
                        @bind-Value="PCodeSearchable"
                        InputType="InputType.Text"
                        MaxLength="5"
                        onkeyup="OnPCodeChanged"
                        ErrorText="@GetErrorMessageForField(nameof(CurrentPersonAccountDto.Pcode))" />
                    </div>
                    <div style="width: 400px">
                        <MudItem xs="12" sm="6" md="3">
                            <div class="mt-3" style="width: 400px">
                                <MudText Typo="Typo.h5" Style="background-color:azure;padding-right:10px">@CurrentPersonAccountDto.FullName</MudText>
                            </div>
                        </MudItem>
                    </div>
                    <MudItem xs="12" sm="6" md="3" Class="pr-10 pt-0">
                        @if (CurrentPersonAccountDto.Curqty != 0)
                        {
                            @if (CurrentPersonAccountDto.V_Mojodi > 10000000000)
                            {
                                <MudNumericField T="long?"
                                @bind-Value="CurrentPersonAccountDto.V_Mojodi"
                                Format="###,###"
                                Adornment="Adornment.End"
                                AdornmentText="ریال"
                                Label="موجودی"
                                Variant="Variant.Outlined"
                                HideSpinButtons="true"
                                Style="font-size:18px"
                                readonly="true" />
                            }
                            else if (CurrentPersonAccountDto.V_Mojodi > 100000000)
                            {
                                <MudNumericField T="long?"
                                @bind-Value="CurrentPersonAccountDto.V_Mojodi"
                                Format="###,###"
                                Adornment="Adornment.End"
                                AdornmentText="ریال"
                                Label="موجودی"
                                Variant="Variant.Outlined"
                                HideSpinButtons="true"
                                Style="font-size:20px"
                                readonly="true" />
                            }
                            else
                            {
                                <MudNumericField T="long?"
                                @bind-Value="CurrentPersonAccountDto.V_Mojodi"
                                Format="###,###"
                                Adornment="Adornment.End"
                                AdornmentText="ریال"
                                Label="موجودی"
                                Variant="Variant.Outlined"
                                HideSpinButtons="true"
                                Style="font-size:22px"
                                readonly="true" />
                            }

                        }


                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">

                    </MudItem>
                    <!-- ردیف دوم: Name و Familyو Father و IssueNo -->
                    <MudItem xs="12" sm="6" md="3">
                        <div class="mt-n6" style="display: flex;font-size: 18px; font-weight: bold;">
                            <MudTextField Style="justify-content:right;width:65%"
                            Label="شماره حساب"
                            Required Immediate="true"
                            For="@(() => CurrentPersonAccountDto.HesabNo)"
                            @bind-Value="HesabNoSearchable"
                            InputType="InputType.Text"
                            OnBlur="OnAccountChanged" />
                            <MudText Style="justify-content:left;width:45%" Class="mt-5 ml-n3">تاریخ افتتاح :</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div class="mt-n6 mr-n3" style="display: flex;font-size: 16px; font-weight: bold;">

                            <!-- فیلد روز -->

                            <MudTooltip Text="لطفاً یک روز معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudNumericField T="int" Variant="Variant.Outlined"
                                @bind-Value="CurrentPersonAccountDto.V_Day"
                                Min="1"
                                Max="31"
                                Immediate="true" />
                            </MudTooltip>

                            <!-- فیلد ماه -->

                            <MudTooltip Text="لطفاً یک ماه معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudNumericField T="int" Variant="Variant.Outlined"
                                @bind-Value="CurrentPersonAccountDto.V_Month"
                                Min="1"
                                Max="12"
                                Immediate="true" />
                            </MudTooltip>

                            <!-- فیلد سال -->

                            <MudTooltip Text="لطفاً یک سال معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudNumericField T="int" Variant="Variant.Outlined"
                                @bind-Value="CurrentPersonAccountDto.V_Year"
                                Min="1300"
                                Max="1499"
                                Immediate="true" />
                            </MudTooltip>

                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" Class="pr-10">



                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div>
                            <MudImage Src="@CurrentPersonPictureAddress" Alt="محل عکس" Elevation="25" Class="rounded-lg mt-n16" Style="width:150px;height:150px" />
                        </div>
                    </MudItem>
                    <!-- ردیف سوم: MelliCode و TelNoو bankType و HesabBank -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width:100%;">
                            <MudTooltip Text="لطفاً مبلغ افتتاحیه را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudNumericField Label="مبلغ افتتاحیه" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                                @bind-Value="CurrentPersonAccountDto.Firstqty"
                                Format="###,###"
                                HideSpinButtons="true" />
                            </MudTooltip>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width:100%;" class="mr-n3">
                            <MudTooltip Text="لطفاً مبلغ ماهیانه را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary">
                                <MudNumericField Label="مبلغ ماهیانه" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                                @bind-Value="CurrentPersonAccountDto.Monthqty"
                                Format="###,###"
                                HideSpinButtons="true" />
                            </MudTooltip>
                        </div>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3" >
                        <div style="width: 75%;align-content:start" class="mr-20">
                            <MudTextField Label="حساب معرف" Immediate="true"  
                            For="@(() => CurrentPersonAccountDto.IdDi)"
                            @bind-Value="CurrentPersonAccountDto.IdDi"
                            onblur="OnMoarefChanged"
                            ErrorText="@GetErrorMessageForField(nameof(CurrentPersonAccountDto.IdDi))" />
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudText Typo="Typo.h5" class="mr-n20 mt-5" Style="background-color:azure;">@_MoarefDesc</MudText>
                    </MudItem>
                    <!-- ردیف چهارم: MelliCode و TelNoو bankType و HesabBank -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6">

                    </MudItem>

                </MudGrid>

            </MudRTLProvider>
            <!-- دکمه‌ها -->
            <div style="display: flex; gap: 10px;">
                <MudButton style="width:30%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="@(!isValid)" OnClick="SavePerson">ذخیره</MudButton>
                <MudButton style="width:30%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Tertiary" OnClick="CancelEdit">لغو</MudButton>
                <MudButton style="width:30%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SpeakerNotes" IconColor="Color.Warning" OnClick="TogglePersonList">
                    @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
                </MudButton>
            </div>
        </MudForm>


    </MudPaper>

    <MudSpacer />
    @if (ShowPersonList)
    {
        <!--
        <MudTable Items="@pagedData" Filter="FilterFunc" SortLabel="Sort by" Hover="true" Bordered="true" Dense="true" Pagination="true" RowsPerPage="5" @bind-Page="currentPage">
        <MudTable Items="@peoples" Hover="true" SortLabel="Sort By" Filter="searchText" PageSize="10" @bind-SelectedItem="selectedPerson">
        <MudTable Items="@filtere" Hover="true" SortLabel="Sort By" PageSize="10" @bind-SelectedItem="selectedPerson">
        -->

        <MudTable T="PersonAccountDto" Items="@_personAccountList" Filter="new Func<PersonAccountDto,bool>(FilterFunction)" Pageable="true" Hover="true" Bordered="true" Striped="true" Dense="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString1" Placeholder="جستجوی سپرده گذار" Immediate="true" OnKeyUp="OnSearchTextChanged" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<PersonAccountDto, object>(x=>x.Pcode)"></MudTableSortLabel>کدشخص</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PersonAccountDto, object>(x=>x.Family)"></MudTableSortLabel>نام خانوادگی</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PersonAccountDto, object>(x=>x.Name)"></MudTableSortLabel>نـــام</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<PersonAccountDto, object>(x=>x.Father)"></MudTableSortLabel>نام پدر</MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonAccountDto, object>(x=>x.HesabNo)"></MudTableSortLabel>شماره حساب</MudTh>

                <MudTh>عملیات</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Pcode</MudTd>
                <MudTd>@context.Family</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Father</MudTd>
                <MudTd>@context.HesabNo</MudTd>
                <MudTd>
                    <MudFab title="اصلاح" Size="Size.Medium" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Edit" IconSize="Size.Medium" Class="ma-2" OnClick="() => EditPerson(context)" />
                    <MudFab title="حـذف" Size="Size.Medium" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" IconSize="Size.Medium" Class="ma-2" OnClick="() => OpenDeleteDialog(context)" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                RowsPerPageString="@rowsPerPageString"
                InfoFormat="@infoFormat"
                AllItemsText="@allItemsText"
                HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    //  private string Data { get; set; }
    //  private string ErrorMessage { get; set; }
    /// <summary>
    /// این قسمت برای تنظیم فونت برای نمایش اعداد کاربرد دارد
    /// </summary>

    ///
    ///

    private bool ShowPersonList { get; set; } = false;
    private List<Person> Persons = new List<Person>();
    private List<PersonAccountDto> _personAccountList = new List<PersonAccountDto>();
    //   private PersonDto CurrentPersonDto = new PersonDto();
    private PersonAccountDto CurrentPersonAccountDto = new PersonAccountDto();

    private string? CurrentPersonPictureAddress;
    private bool IsEditing;
    private bool isValid;
    private MudForm? PersonsAccountForm;
    // private MudTextField<string> PersonCode;
    private string? searchString1 = string.Empty;
    private string? PCodeSearchable = string.Empty;
    private long HesabNoSearchable = 0;
    private string? _MoarefDesc = string.Empty;

    private HashSet<Person> selectedItems = new HashSet<Person>();

    //Pagination Variables
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;

    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    // loading Variable
    private bool isLoading = false;
    private int pageSize = 10;
    private int currentPage = 0;




    //Order Variable
    private Func<Person, object> currentSortBy = p => p.Code; // فیلد پیش‌فرض برای مرتب‌سازی
    private SortDirection currentSortDirection = SortDirection.Ascending;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_Db?.Persons == null || _Db?.Hesabs == null)
            {
                return; // خروج از متد اگر هیچ داده‌ای وجود نداشته باشد
            }

            pageSize = _Db.Persons.Count();
            var query = (from person in _Db.Persons
                         join account in _Db.Hesabs on person.Code equals account.Pcode
                         orderby person.Code
                         select new PersonAccountDto
                             {
                                 FullName = (string.IsNullOrEmpty(person.Name) ? "" : person.Name.Trim()) + " " +
                                                                            (string.IsNullOrEmpty(person.Family) ? "" : person.Family.Trim()) + "(" +
                                                                            (string.IsNullOrEmpty(person.Father) ? "" : person.Father.Trim()) + ")",
                                 Family = person.Family,
                                 Name = person.Name,
                                 Father = person.Father,
                                 Scode = account.Scode,
                                 Pcode = (string.IsNullOrEmpty(account.Pcode) ? "" : account.Pcode),
                                 HesabNo = account.HesabNo,
                                 Date = account.Date,
                                 Firstqty = account.Firstqty,
                                 Monthqty = account.Monthqty,
                                 Curqty = account.Curqty,
                                 P = account.P,
                                 P1 = account.P1,
                                 IdDi = account.IdDi,
                                 V_Day = account.V_Day,
                                 V_Month = account.V_Month,
                                 V_Year = account.V_Year,
                                 V_Mojodi = account.V_Mojodi
                             })
            .Skip(currentPage * pageSize)  // صفحه بندی
            .Take(pageSize)  // تعداد رکوردهای هر صفحه
            .ToList();  // تبدیل به لیست

            if (query != null && query.Any())
            {
                _personAccountList = query;
            }
            if (CurrentPersonAccountDto != null)
            {
                Mapper.Map(new PersonAccountDto(), CurrentPersonAccountDto);
            }

        }
        catch (HttpRequestException ex)
        {

            // اگر InnerException موجود است
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");

        }

    }

    private bool FilterFunction(PersonAccountDto _personAccount) => FilterFunc(_personAccount, searchString1 ?? "");

    private bool FilterFunc(PersonAccountDto _personAccount, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (_personAccount != null)
        {
            if (_personAccount.Name != null && _personAccount.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (_personAccount.Family != null && _personAccount.Family.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{_personAccount.Pcode} {_personAccount.Father} {_personAccount.HesabNo}".Contains(searchString))
                return true;
        }
        return false;
    }
    private void SavePerson()
    {
        /*
        try
        {
        if (IsEditing)
        {
        var person = _Db.Persons.FirstOrDefault(p => p.IdDi == CurrentHesabNo);
        if (person != null)
        {
        _Db.Entry(person).Property(p => p.IdDi).IsModified = false;
        Mapper.Map(CurrentPersonDto, person); // Mapping DTO to Entity
        _snackBar.Add($"پرسنل {CurrentPersonDto.Name} {CurrentPersonDto.Family} اصلاح شد", Severity.Success);
        // person.Name = CurrentPersonDto.Name;
        // person.Family = CurrentPersonDto.Family;
        // person.Code = CurrentPersonDto.Code;
        }
        }
        else
        {
        var newPerson = Mapper.Map<Person>(CurrentPersonDto); // Mapping DTO to Entity
        CurrentHesabNo = 0;
        _Db.Persons.Add(newPerson);
        Persons.Add(newPerson);
        _snackBar.Add($"پرسنل {CurrentPersonDto.Name} {CurrentPersonDto.Family} ثبت شد", Severity.Success);

        }
        //Persons.Count();
        _Db.SaveChanges();
        _logger.LogInformation($"پرسنل {CurrentPersonDto.Name} {CurrentPersonDto.Family} ثبت شد");
        CancelEdit();
        }
        catch (DbUpdateException ex)
        {
        // اینجا خطاهایی که مربوط به مشکلات ذخیره‌سازی در پایگاه داده هستند مدیریت می‌شود
        // مثلاً خطاهای مربوط به نقض محدودیت‌های پایگاه داده مانند unique constraint

        // به کاربر پیام خطای مناسب نمایش داده می‌شود

        _logger.LogError(ex, "خطایی در ذخیره‌سازی داده‌ها به پایگاه داده رخ داد.");
    }
    */
    }

    private void EditPerson(PersonAccountDto personaccountdto)
    {
        CurrentPersonAccountDto = Mapper.Map<PersonAccountDto>(personaccountdto);
        HesabNoSearchable = personaccountdto.HesabNo;
        HesabNoSearchable = CurrentPersonAccountDto.HesabNo;
        PCodeSearchable = CurrentPersonAccountDto.Pcode;
        var MoarefCode = CurrentPersonAccountDto.IdDi;
        IsEditing = true;
        if (personaccountdto.IdDi != 0)
        {
            _MoarefDesc = _personAccountList?.FirstOrDefault(p => p.HesabNo == MoarefCode)?.FullName;
        }
        

    }

    private async Task OpenDeleteDialog(PersonAccountDto context)
    {
        var deleteContext = context.Name + " " + context.Family;
        deleteContext = " برای حذف " + deleteContext + " مطمئن هستید؟ ";
        // اینجا باید یک دیالوگ برای تایید حذف باز کنیم
        var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmationDialog.ContextText), deleteContext}
            };

        var dialog = DialogService.Show<DeleteConfirmationDialog>("حذف حساب", parameters);
        var result = await dialog.Result;

        if (!result?.Canceled == false)
        {
            // اگر کاربر گزینه Yes را انتخاب کرده باشد، عملیات حذف انجام می‌شود
            HesabNoSearchable = context.HesabNo;
            var hesabToRemove = _personAccountList.FirstOrDefault(p => p.HesabNo == HesabNoSearchable);
            bool lHaveQvam = _Db.Qvams.Any(qvam => qvam.Pcode == context.Pcode);
            bool lHavePardar = _Db.Pardars.Any(pardar => pardar.Pcode == context.Pcode);
            if (hesabToRemove != null)
            {
                if (lHaveQvam || lHavePardar)  // در سایر جداول رکورد دارد
                    _snackBar.Add($"مجاز به حذف {hesabToRemove.Name} {hesabToRemove.Family} نیستید ", Severity.Error);
                else
                {
                    _personAccountList.Remove(hesabToRemove);
                    _Db.Remove(hesabToRemove);
                    _Db.SaveChanges();
                    _snackBar.Add($" {hesabToRemove.Name} {hesabToRemove.Family} حذف شد ", Severity.Warning);
                }
            }
            else
            {
                // شخصی با این ID در لیست پیدا نشد
                // می‌توانید اینجا لاگ یا پیام خاصی اضافه کنید
            }

        }
    }

    private void CancelEdit()
    {
        CurrentPersonAccountDto = new PersonAccountDto();
        HesabNoSearchable = 0;
        CurrentPersonPictureAddress = PersonServices.GetPersonPictureAddress("000");
        IsEditing = false;
        PersonsAccountForm?.ResetAsync();
    }



    // متدی برای دریافت پیغام خطا از داده‌های وارد شده
    private string GetErrorMessageForField(string fieldName)
    {
        var context = new ValidationContext(CurrentPersonAccountDto);
        var validationResults = new List<ValidationResult>();

        // اعتبارسنجی فیلد خاص

        Validator.TryValidateProperty(
            typeof(PersonAccountDto).GetProperty(fieldName).GetValue(CurrentPersonAccountDto),
            new ValidationContext(CurrentPersonAccountDto) { MemberName = fieldName },
            validationResults);


        // اگر خطا وجود دارد، پیغام خطا را برمی‌گرداند
        return validationResults.Any() ? validationResults.First().ErrorMessage : string.Empty;
    }

    // متدی برای ارسال فرم
    private void HandleSubmit()
    {
        isValid = ValidateModel();
    }

    // اعتبارسنجی مدل
    private bool ValidateModel()
    {
        var context = new ValidationContext(CurrentPersonAccountDto);
        var validationResults = new List<ValidationResult>
    ();
        return Validator.TryValidateObject(CurrentPersonAccountDto, context, validationResults, true);
    }

    private void TogglePersonList()
    {
        ShowPersonList = !ShowPersonList;
    }
    private void SortTableByName()
    {
        currentSortBy = p => p.Name ?? "";
        ToggleSortDirection();
    }
    private void ToggleSortDirection()
    {
        if (currentSortDirection == SortDirection.Ascending)
        {
            currentSortDirection = SortDirection.Descending;
        }
        else
        {
            currentSortDirection = SortDirection.Ascending;
        }

    }


    private void OnPCodeChanged()
    {
        if (PCodeSearchable?.Length == 5)
        {
            if (PCodeSearchable.All(char.IsDigit))    /// کنترل عددی بودن کد
            {
                CurrentPersonPictureAddress = PersonServices.GetPersonPictureAddress(PCodeSearchable);
                if (_Db.Persons.Any(p => p.Code == PCodeSearchable))   // چک وجود پرسنل
                {
                    if (_Db.Hesabs.Any(p => p.Pcode == PCodeSearchable))   // کد حساب ثبت شده در صفحه وب اگر موجود بود پرشود
                    {
                        var accountToEdit = _personAccountList.FirstOrDefault(p => p.Pcode == PCodeSearchable);
                        if (accountToEdit != null)
                        {
                            CurrentPersonAccountDto = Mapper.Map<PersonAccountDto>
                                (accountToEdit);
                            HesabNoSearchable = accountToEdit.HesabNo;
                            IsEditing = true;
                        }
                    }
                    else
                    {
                        Mapper.Map(new Person(), CurrentPersonAccountDto);
                        HesabNoSearchable = 0;
                        IsEditing = false;
                    }
                }
                else
                {
                    _snackBar.Add(" سپرده گذار یافت نشد ", Severity.Warning);
                    Mapper.Map(new PersonAccountDto(), CurrentPersonAccountDto);
                    PCodeSearchable = "";
                    IsEditing = false;
                    CancelEdit();
                }
            }
            else
            {
                _snackBar.Add($"  فیلد باید فقط عددی باشد", Severity.Warning);
                PCodeSearchable = "";
                IsEditing = false;
                CancelEdit();
            }
        }
    }

    private void OnAccountChanged()
    {
        ///
        ///   کنترل اینکه طرف حساب دارد یا نه
        ///

        var personAccount = _personAccountList.FirstOrDefault(p => p.HesabNo == HesabNoSearchable);
        if (personAccount != null)
        {
            var Pcode = personAccount.Pcode;
            if (Pcode != PCodeSearchable)
            {
                _snackBar.Add($" حساب متعلق به {personAccount.FullName} می باشد", Severity.Warning);
                HesabNoSearchable = CurrentPersonAccountDto.HesabNo;
            }
        }

    }

    private void OnSearchTextChanged()
    {
        if (!string.IsNullOrEmpty(searchString1))
        {
            searchString1 = TextHelper.NormalizeString(searchString1);
        }
    }
    private void OnMoarefChanged()
    {
        if (CurrentPersonAccountDto.IdDi != 0 )
        {
            if (_personAccountList.Any(p => p.HesabNo == CurrentPersonAccountDto.IdDi))   // کد معرف در فایل حساب یافت شد
            {
                if (CurrentPersonAccountDto.IdDi == HesabNoSearchable)
                {
                    _snackBar.Add($" معرف مجاز نیست", Severity.Error);
                    CurrentPersonAccountDto.IdDi = 0;
                }
                else 
                {
                    _MoarefDesc = _personAccountList.FirstOrDefault(p => p.HesabNo == CurrentPersonAccountDto.IdDi).FullName ?? "";
                }
            }
            else
            {
                _snackBar.Add($" معرف یافت نشد", Severity.Error);
                CurrentPersonAccountDto.IdDi = 0;
                _MoarefDesc = "";

            }

         }
    }
    /*
    private void OnBlurFnc()
    {
    if (!string.IsNullOrEmpty(PersonCode.Value))
    {
    CurrentPersonPictureAddress = PersonServices.GetPersonPictureAddress(PersonCode?.Value);
    if (_Db.Hesabs.Any(p => p.Pcode == PersonCode.Value))   // کد پرسنل ثبت شده در صفحه وب اگر در فایل حساب موجود بود پرشود
    {
    var HesabInfo = _Db.Hesabs.FirstOrDefault(p => p.Pcode == PersonCode.Value);
    var HesabId = HesabInfo.HesabNo;
    var personaccountToEdit = _personAccountList.FirstOrDefault(p => p.HesabNo == HesabId);
    CurrentPersonAccountDto = Mapper.Map<PersonAccountDto>
        (personaccountToEdit);
        CurrentHesabNo = personaccountToEdit.HesabNo;

        }
        else
        {
        //_snackBar.Add(" کد سپرده گذار یافت نشد ", Severity.Success, config => { config.HideIcon = true; config.VisibleStateDuration = 4000;  });
        _snackBar.Add(" کد سپرده گذار یافت نشد ", Severity.Success);
        //  PersonCode.Value = "";
        //  Mapper.Map(new PersonAccountDto(), CurrentPersonAccountDto);
        //  CancelEdit();

        }
    }
    }
    */
    /*
    private bool searchText()
    {
    Persons = Persons.Where(x => string.IsNullOrEmpty(searchString) ||
    x.Family.Contains(searchString, StringComparison.InvariantCultureIgnoreCase) ||
    x.Name.Contains(searchString, StringComparison.InvariantCultureIgnoreCase))
    .Skip(currentPage * 5)
    .Take(5)
    .ToList();
    return true;
    }
    */
}}
