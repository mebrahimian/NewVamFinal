@page "/form3"
@inject IMapper Mapper
@layout MainLayout
@inject DatabaseContext _Db
@using AutoMapper
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using VamBlazor.Client.Domain.Enum
@using MudBlazor
@using VamBlazor.Client.Domain.Entities
@using VamBlazor.Client.Application.Dtos
@using VamBlazor.Client.Application.Mappings

<MudContainer Dir="rtl" style="font-family:'VazirUI';">

    <MudPaper>
        <MudGrid Style="flex-direction:">
            <MudItem Class="mt-5 left">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="TogglePersonList">
                    @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
                </MudButton>
            </MudItem>

        </MudGrid>

        <MudForm @ref="PersonForm" @bind-IsValid="isValid" Spacing="16" Class="p-4">
            <MudRTLProvider RightToLeft="true">
                <MudGrid>
                    <!-- ردیف اول: Code و City , Sex -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 100px;">
                            <MudTextField Label="کد شخص"
                            For="@(() => CurrentPersonDto.Code)"
                            @bind-Value="CurrentPersonDto.Code"
                            ErrorText="@GetErrorMessageForField(nameof(CurrentPersonDto.Code))" />
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 200px;">
                            <MudSelect T="char" @bind-Value="CurrentPersonDto.City" Label="محل سکونت" Variant="Variant.Outlined">
                                @foreach (CityEnum city in Enum.GetValues(typeof(CityEnum)))
                                {
                                    <MudSelectItem Value="@(Convert.ToChar(city))">@GetCityName(city)</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 100px;">
                            <MudSelect T="char" @bind-Value="CurrentPersonDto.Sex" Label="جنسیت" Variant="Variant.Outlined">
                                @foreach (SexEnum sex in Enum.GetValues(typeof(SexEnum)))
                                {
                                    <MudSelectItem Value="@(Convert.ToChar(sex))">@GetSex(sex)</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="TogglePersonList">
                            @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
                        </MudButton>
                    </MudItem>
                    <!-- ردیف دوم: Name و Familyو Father و IssueNo -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="نام خانوادگی"
                            For="@(() => CurrentPersonDto.Family)"
                            @bind-Value="CurrentPersonDto.Family"
                            ErrorText="@GetErrorMessageForField(nameof(CurrentPersonDto.Family))" />
                        </div>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="نــــام"
                            For="@(() => CurrentPersonDto.Name)"
                            @bind-Value="CurrentPersonDto.Name"
                            ErrorText="@GetErrorMessageForField(nameof(CurrentPersonDto.Name))" />
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="نام پدر" @bind-Value="CurrentPersonDto.Father" Required="true" />
                        </div>
                    </MudItem>

                    <!-- ردیف سوم: MelliCode و TelNoو Father و IssueNo -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="شماره شناسنامه" @bind-Value="CurrentPersonDto.IssueNo" Required="true" />
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="کد ملی" @bind-Value="CurrentPersonDto.Mellicode" Required="true" />
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div style="width: 150px;">
                            <MudTextField Label="شماره تماس" @bind-Value="CurrentPersonDto.Tel" InputType="InputType.Telephone" Variant="Variant.Outlined" />
                        </div>
                    </MudItem>

                    <!-- ردیف دوم: Sex و Active
                    <MudItem xs="6">
                    <MudSelect T="string" Label="Sex" @bind-Value="CurrentPersonDto.Sex" Required="true">
                    <MudSelectItem Value="1">Male</MudSelectItem>
                    <MudSelectItem Value="2">Female</MudSelectItem>
                    </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                    <MudSelect T="string" Label="Status" @bind-Value="CurrentPersonDto.Status" Required="true">
                    <MudSelectItem Value="1">Active</MudSelectItem>
                    <MudSelectItem Value="2">InActive</MudSelectItem>
                    </MudSelect>
                    </MudItem> -->
                </MudGrid>

            </MudRTLProvider>
            <!-- دکمه‌ها -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePerson">Save</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="TogglePersonList">
                @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
            </MudButton>
        </MudForm>
        <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="TogglePersonList">
            @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
        </MudButton>
    </MudPaper>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="TogglePersonList">
        @(ShowPersonList ? "مخفی کردن لیست پرسنل" : "نمایش لیست پرسنل")
    </MudButton>
    <MudSpacer />
    @if (ShowPersonList)
    {
        <MudTable Items="@people" ServerData="LoadServerData" PageSize="10" Hover="true" Bordered="true" Striped="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString1" Placeholder="جستجوی سپرده گذار" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" OnKeyUp="OnSearchChanged"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.Code)"></MudTableSortLabel>Code</MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x=>x.Name)"></MudTableSortLabel>Name</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Person, object>(x=>x.Family)"></MudTableSortLabel>Family</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Code</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Family</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="() => EditPerson(context)">Edit</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeletePerson(context)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                RowsPerPageString="@rowsPerPageString"
                InfoFormat="@infoFormat"
                AllItemsText="@allItemsText"
                HorizontalAlignment="@horizontalAlignment"
                HideRowsPerPage="@hideRowsPerPage"
                HidePageNumber="@hidePageNumber"
                HidePagination="@hidePagination" />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private bool ShowPersonList { get; set; } = true;
    private List<Person> Persons = new List<Person>();
    private List<Person> filteredPeople = new List<Person>();
    private List<PersonDto> PersonDtos = new List<PersonDto>();
    private PersonDto CurrentPersonDto = new PersonDto();
    private bool IsEditing = false;
    private bool isValid = true;
    private MudForm? PersonForm;
    private string? searchString1 = string.Empty;
    private Person selectedItem1 = null;
    private HashSet<Person> selectedItems = new HashSet<Person>();

    //Pagination Variables
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    // loading Variable
    private bool isLoading = false;
    private int pageSize = 100;
    private int currentPage = 0;

    //Order Variable
    private Func<Person, object> currentSortBy = p => p.Code; // فیلد پیش‌فرض برای مرتب‌سازی
    private SortDirection currentSortDirection = SortDirection.Ascending;

    private List<Person> people = new List<Person>();

    private async Task OnSearchChanged()
    {
        // تغییر مقدار جستجو
      //  searchString1 = newValue;

        // درخواست به‌روزرسانی جدول (بارگذاری مجدد داده‌ها)
        await LoadServerData(new TableState(), new CancellationToken());  // دوباره کوئری را با فیلتر جدید اجرا می‌کنیم
    }
    private async Task<TableData<Person>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var query = _Db.Persons.AsQueryable(); // از DbSet برای دریافت داده‌ها استفاده کنید

        if (!string.IsNullOrWhiteSpace(searchString1))
        {
            query = query.Where(p => EF.Functions.Like(p.Name, $"%{searchString1}%") ||
                                     EF.Functions.Like(p.Family, $"%{searchString1}%") ||
                                     EF.Functions.Like($"{p.Code} {p.Father} {p.Mellicode}", $"%{searchString1}%"));
        }

        var totalItems = await query.CountAsync(cancellationToken);
        // اضافه کردن فیلتر صفحه‌بندی
        query = query.Skip(state.Page * state.PageSize)
                     .Take(state.PageSize);

        
        // دریافت داده‌ها از پایگاه داده
        
        people = await query.ToListAsync(cancellationToken);
        
        // بازگشت داده‌ها به همراه تعداد کل آیتم‌ها برای صفحه‌بندی
        return new TableData<Person>
            {
                Items = people,
                TotalItems = totalItems
            };
    }

    
    private void SavePerson()
    {
        if (IsEditing)
        {
            var person = Persons.FirstOrDefault(p => p.Code == CurrentPersonDto.Code);
            if (person != null)
            {
                Mapper.Map(CurrentPersonDto, person); // Mapping DTO to Entity
            }
        }
        else
        {
            var newPerson = Mapper.Map<Person>(CurrentPersonDto); // Mapping DTO to Entity
            newPerson.IdDi = Persons.Count > 0 ? Persons.Max(p => p.IdDi) + 1 : 1;
            Persons.Add(newPerson);
            PersonDtos.Add(Mapper.Map<PersonDto>(newPerson)); // Mapping Entity to DTO
        }

        CancelEdit();
    }

    private void EditPerson(Person person)
    {
        CurrentPersonDto = Mapper.Map<PersonDto>(person);
        IsEditing = true;

    }

    private void DeletePerson(Person person)
    {
        if (person == null)
        {
            // می‌توان پیام یا لاگی برای شخص نامعتبر اضافه کرد
            return;
        }

        var personToRemove = Persons.FirstOrDefault(p => p.Code == person.Code);
        if (personToRemove != null)
        {
            Persons.Remove(personToRemove);
        }
        else
        {
            // شخصی با این ID در لیست پیدا نشد
            // می‌توانید اینجا لاگ یا پیام خاصی اضافه کنید
        }
    }

    private void CancelEdit()
    {
        CurrentPersonDto = new PersonDto();
        IsEditing = false;
        PersonForm.ResetAsync();
    }



    // متدی برای دریافت پیغام خطا از داده‌های وارد شده
    private string GetErrorMessageForField(string fieldName)
    {
        var context = new ValidationContext(CurrentPersonDto);
        var validationResults = new List<ValidationResult>();

        // اعتبارسنجی فیلد خاص
        Validator.TryValidateProperty(
            typeof(PersonDto).GetProperty(fieldName).GetValue(CurrentPersonDto),
            new ValidationContext(CurrentPersonDto) { MemberName = fieldName },
            validationResults
        );

        // اگر خطا وجود دارد، پیغام خطا را برمی‌گرداند
        return validationResults.Any() ? validationResults.First().ErrorMessage : string.Empty;
    }
    private void TogglePersonList()
    {
        ShowPersonList =  true ; //!ShowPersonList;
    }
    
    private void ToggleSortDirection()
    {
        if (currentSortDirection == SortDirection.Ascending)
        {
            currentSortDirection = SortDirection.Descending;
        }
        else
        {
            currentSortDirection = SortDirection.Ascending;
        }

    }
    private string GetCityName(CityEnum city)
    {
        return city switch
        {
            CityEnum.Shahroud => "شاهرود",
            CityEnum.Gorgan => "گرگان",
            CityEnum.Tehran => "تهران",
            CityEnum.Other => "سایر",
            _ => "نامشخص"
        };
    }
    private string GetSex(SexEnum sex)
    {
        return sex switch
        {
            SexEnum.Male => "مرد",
            SexEnum.Female => "زن",
            _ => "نامشخص"
        };
    }

}